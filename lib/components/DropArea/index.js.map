{"version":3,"sources":["../../../src/node_modules/components/DropArea/index.js"],"names":["DropAreaWrapper","div","Preview","DropArea","onFileDrop","console","log","files","renderFiles","value","props","name","onChange","required","disabled","className","id","margin","width","padding","background","textAlign","borderWidth","borderColor","borderStyle","borderRadius","color","Component","propTypes","func","isRequired","bool","string","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;AAWA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,2BAAOC,GAAzB,iBAAN;;AAOA,IAAMC,UAAU,2BAAOD,GAAjB,kBAAN;;IAEqBE,Q;;;;;;;;;;;;;;0LA+BnBC,U,GAAa,iBAAS;AACpBC,cAAQC,GAAR,CAAYC,KAAZ;AACA;AACA;AACA;AACA;AACA;AACD,K,QACDC,W,GAAc,YAAM;AAAA,UACVC,KADU,GACA,MAAKC,KADL,CACVD,KADU;;AAElB,UAAIA,SAASA,MAAM,CAAN,CAAb,EAAuB;AACrB,eACE;AAAC,yBAAD;AAAA;AACE,iEAAM,MAAK,YAAX,GADF;AAEE;AAAC,mBAAD;AAAA,cAAS,QAAQ,IAAjB;AACGA,kBAAM,CAAN,EAASE;AADZ;AAFF,SADF;AAQD,OATD,MASO;AACL,eACE;AAAC,yBAAD;AAAA;AACE,iEAAM,MAAK,MAAX,GADF;AAEE;AAAC,mBAAD;AAAA;AAAA;AAAA;AAFF,SADF;AAMD;AACF,K;;;;;6BAEQ;AAAA,mBACwD,KAAKD,KAD7D;AAAA,UACCE,QADD,UACCA,QADD;AAAA,UACWH,KADX,UACWA,KADX;AAAA,UACkBI,QADlB,UACkBA,QADlB;AAAA,UAC4BC,QAD5B,UAC4BA,QAD5B;AAAA,UACsCC,SADtC,UACsCA,SADtC;AAAA,UACiDC,EADjD,UACiDA,EADjD;;;AAGP,aACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,sBAAU,KADZ;AAEE,oBAAO,SAFT;AAGE,oBAAQ,KAAKZ,UAHf;AAIE,mBAAO;AACLa,sBAAQ,UADH;AAELC,qBAAO,MAFF;AAGLC,uBAAS,SAHJ;AAILC,0BAAY,iBAJP;AAKLC,yBAAW,QALN;AAMLC,2BAAa,CANR;AAOLC,2BAAa,MAPR;AAQLC,2BAAa,OARR;AASLC,4BAAc;AATT,aAJT;AAeE,yBAAa,EAAEC,OAAO,SAAT,EAff;AAgBE,yBAAa,EAhBf;AAiBE,sBAAUb,QAjBZ;AAkBE,sBAAUC,QAlBZ;AAmBE,uBAAWC,SAnBb;AAoBE,gBAAIC;AApBN;AAsBG,eAAKR,WAAL;AAtBH;AADF,OADF;AA4BD;;;;EA3FmC,gBAAMmB,S;;AAAvBxB,Q,CACZyB,S,GAAY;AACjB;;;AAGAhB,YAAU,oBAAUiB,IAAV,CAAeC,UAJR;AAKjB;;;AAGAjB,YAAU,oBAAUkB,IARH;AASjB;;;AAGAjB,YAAU,oBAAUiB,IAZH;AAajB;;;AAGAhB,aAAW,oBAAUiB,MAhBJ;AAiBjB;;;AAGAhB,MAAI,oBAAUgB;AApBG,C;AADA7B,Q,CAwBZ8B,Y,GAAe;AACpBpB,YAAU,KADU;AAEpBC,YAAU,KAFU;AAGpBC,aAAW,IAHS;AAIpBC,MAAI;AAJgB,C;kBAxBHb,Q","file":"index.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Progress,\n  Card,\n  Image,\n  Dimmer,\n  Segment,\n  Feed,\n  Label,\n  Icon\n} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"formsy-semantic-ui-react\";\nimport Dropzone from \"react-dropzone\";\nimport styled from \"styled-components\";\n\nconst DropAreaWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  cursor: pointer;\n`;\n\nconst Preview = styled.div`margin: auto auto auto 16px;`;\n\nexport default class DropArea extends React.Component {\n  static propTypes = {\n    /**\n     * Handler for the onChange event on the input.\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Marks that this input is required for form submission.\n     */\n    required: PropTypes.bool,\n    /**\n     * Marks that the user cannot change this input.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Adds a class name to the input element.\n     */\n    className: PropTypes.string,\n    /**\n     * Adds an id to the input element.\n     */\n    id: PropTypes.string\n  };\n\n  static defaultProps = {\n    required: false,\n    disabled: false,\n    className: null,\n    id: null\n  };\n\n  onFileDrop = files => {\n    console.log(files);\n    // const upload = uploadProfilePicture(files[0])\n    // // track progress\n    // upload.on('state_changed', snapshot => {\n    //   this.setState({ uploadProgress: Math.floor((snapshot.bytesTransferred / snapshot.totalBytes) * 100) })\n    // })\n  };\n  renderFiles = () => {\n    const { value } = this.props;\n    if (value && value[0]) {\n      return (\n        <DropAreaWrapper>\n          <Icon name=\"fileFilled\" />\n          <Preview active={true}>\n            {value[0].name}\n          </Preview>\n        </DropAreaWrapper>\n      );\n    } else {\n      return (\n        <DropAreaWrapper>\n          <Icon name=\"file\" />\n          <Preview>Drop a file here, or click to browse.</Preview>\n        </DropAreaWrapper>\n      );\n    }\n  };\n\n  render() {\n    const { onChange, value, required, disabled, className, id } = this.props;\n\n    return (\n      <Container>\n        <Dropzone\n          multiple={false}\n          accept=\"image/*\"\n          onDrop={this.onFileDrop}\n          style={{\n            margin: \"0px auto\",\n            width: \"100%\",\n            padding: \"2.5em 0\",\n            background: \"rgba(0,0,0,0.1)\",\n            textAlign: \"center\",\n            borderWidth: 1,\n            borderColor: \"#ddd\",\n            borderStyle: \"solid\",\n            borderRadius: 2\n          }}\n          activeStyle={{ color: \"#00bcec\" }}\n          rejectStyle={{}}\n          required={required}\n          disabled={disabled}\n          className={className}\n          id={id}\n        >\n          {this.renderFiles()}\n        </Dropzone>\n      </Container>\n    );\n  }\n}\n"]}