{"version":3,"sources":["../../../src/node_modules/components/XTerm/index.js"],"names":["XTerm","props","onFocus","focusChanged","bind","onBlur","onInput","onKey","state","isFocused","term","open","xtermElement","on","value","writeln","xterm","destroy","parentElementStyle","window","getComputedStyle","element","parentElement","parentElementHeight","parseInt","getPropertyValue","parentElementWidth","elementStyle","elementPaddingVer","elementPaddingHor","availableHeight","availableWidth","subjectRow","rowContainer","firstElementChild","contentBuffer","innerHTML","style","display","characterWidth","getBoundingClientRect","width","characterHeight","offsetHeight","rows","cols","geometry","proposeGeometry","resize","data","write","focused","setState","onFocusChange","key","ev","console","log","isPrintable","altKey","altGraphKey","ctrlKey","metaKey","keyCode","prompt","x","blink","cursorBlink","refresh","xtermClassName","node","propTypes","string","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["// eslint-disable-next-line import/no-webpack-loader-syntax\nimport \"!style-loader!css-loader!xterm/dist/xterm.css\";\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Xterm from \"xterm\";\n\nclass XTerm extends Component {\n  constructor(props) {\n    super(props);\n    this.onFocus = this.focusChanged.bind(this, true);\n    this.onBlur = this.focusChanged.bind(this, false);\n    this.focusChanged = this.focusChanged.bind(this);\n    this.onInput = this.onInput.bind(this);\n    this.onKey = this.onKey.bind(this);\n    this.state = {\n      isFocused: false\n    };\n  }\n  componentDidMount() {\n    const term = new Xterm();\n    term.open(this.xtermElement);\n    term.on(\"focus\", this.onFocus);\n    term.on(\"blur\", this.onBlur);\n    term.on(\"data\", this.onInput);\n    this.onInput(\"key\", this.onKey);\n    if (this.props.value) {\n      term.writeln(this.props.value);\n    }\n    this.xterm = term;\n  }\n  componentWillUnmount() {\n    if (this.xterm) {\n      this.xterm.destroy();\n      this.xterm = null;\n    }\n  }\n  getXTerm() {\n    return this.xterm;\n  }\n  proposeGeometry() {\n    const parentElementStyle = window.getComputedStyle(\n      this.element.parentElement\n    );\n    const parentElementHeight = parseInt(\n      parentElementStyle.getPropertyValue(\"height\")\n    );\n    const parentElementWidth = parseInt(\n      parentElementStyle.getPropertyValue(\"width\")\n    );\n    const elementStyle = window.getComputedStyle(this.element);\n    const elementPaddingVer =\n      parseInt(elementStyle.getPropertyValue(\"padding-top\")) +\n      parseInt(elementStyle.getPropertyValue(\"padding-bottom\"));\n    const elementPaddingHor =\n      parseInt(elementStyle.getPropertyValue(\"padding-right\")) +\n      parseInt(elementStyle.getPropertyValue(\"padding-left\"));\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor;\n    const subjectRow = this.rowContainer.firstElementChild;\n    const contentBuffer = subjectRow.innerHTML;\n\n    subjectRow.style.display = \"inline\";\n    subjectRow.innerHTML = \"W\"; // Common character for measuring width, although on monospace\n    subjectRow.style.display = \"\"; // Revert style before calculating height, since they differ.\n    subjectRow.innerHTML = contentBuffer;\n\n    const characterWidth = subjectRow.getBoundingClientRect().width;\n    const characterHeight = parseInt(subjectRow.offsetHeight);\n\n    const rows = parseInt(availableHeight / characterHeight);\n    const cols = parseInt(availableWidth / characterWidth) - 1;\n\n    const geometry = { cols: cols, rows: rows };\n    return geometry;\n  }\n  fit() {\n    const geometry = this.proposeGeometry();\n    this.resize(geometry.cols, geometry.rows);\n  }\n  resize(cols, rows) {\n    if (!this.xterm) {\n      return;\n    }\n    this.xterm.resize(cols, rows);\n  }\n  write(data) {\n    if (!this.xterm) {\n      return;\n    }\n    this.xterm.write(data);\n  }\n  writeln(data) {\n    if (!this.xterm) {\n      return;\n    }\n    this.xterm.writeln(data);\n  }\n  focusChanged(focused) {\n    this.setState({\n      isFocused: focused\n    });\n    this.props.onFocusChange && this.props.onFocusChange(focused);\n  }\n  onKey(key, ev) {\n    if (this.props.onKey) {\n      return this.props.onKey(key, ev);\n    }\n\n    console.log([key, ev]);\n\n    const isPrintable =\n      !ev.altKey && !ev.altGraphKey && !ev.ctrlKey && !ev.metaKey;\n    if (ev.keyCode == 13) {\n      this.prompt();\n    } else if (ev.keyCode == 8) {\n      // Do not delete the prompt\n      if (term.x > 2) {\n        term.write(\"\\b \\b\");\n      }\n    } else if (isPrintable) {\n      this.term.write(key);\n    }\n  }\n  prompt() {\n    this.write(\"\\r\\n\" + this.props.prompt);\n  }\n  onInput(data) {\n    if (this.props.onInput) {\n      return this.props.onInput(data);\n    }\n    this.write(data);\n  }\n  setCursorBlink(blink) {\n    if (this.xterm && this.xterm.cursorBlink !== blink) {\n      this.xterm.cursorBlink = blink;\n      this.xterm.refresh(0, this.xterm.rows - 1);\n    }\n  }\n  render() {\n    const xtermClassName = this.state.isFocused ? \"xterm\" : \"xterm-focused\";\n    return (\n      <div>\n        <div\n          ref={node => {\n            this.xtermElement = node;\n          }}\n          className={xtermClassName}\n        />{\" \"}\n      </div>\n    );\n  }\n}\n\nXTerm.propTypes = {\n  prompt: PropTypes.string,\n  onFocusChange: PropTypes.func,\n  onInput: PropTypes.func,\n  onKey: PropTypes.func,\n  value: PropTypes.string\n};\n\nXTerm.defaultProps = {\n  prompt: \"> \"\n};\n\nexport default XTerm;\n"]}