{"version":3,"sources":["../../../src/node_modules/components/UploadArea/index.js"],"names":["UploadArea","props","addFile","onFileAdd","console","log","onFileAdded","file","id","source","name","type","alt","data","state","progress","uppy","debug","autoProceed","use","target","uppyElement","maxHeight","inline","endpoint","resume","run","on","fileID","uploadURL","newProgress","getState","totalProgress","setState","node","Component","defaultProps"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AAGA;;;;;;;;;AAJA;;;AAGA;;;IAOqBA,U;;;AA0BnB,sBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AAAA,wHAClBA,KADkB;;AAAA,UAlB1BC,OAkB0B,GAlBhB,YAAM,CAAE,CAkBQ;;AAAA,UAjB1BC,SAiB0B,GAjBd,YAAM;AAChBC,cAAQC,GAAR;AACD,KAeyB;;AAAA,UAd1BC,WAc0B,GAdZ,YAAM;AAClBF,cAAQC,GAAR;AACD,KAYyB;;AAAA,UAX1BH,OAW0B,GAXhB;AAAA,aAAW,gBAAQ;AAC3BE,gBAAQC,GAAR,CAAY,OAAZ,EAAqBE,IAArB;AACAL,gBAAQ;AACNM,cAAI,sBADE;AAENC,kBAAQ,aAFF;AAGNC,gBAAMH,KAAKG,IAHL;AAINC,gBAAMJ,KAAKI,IAJL;AAKNC,eAAKL,KAAKG,IALJ;AAMNG,gBAAMN,KAAKM;AANL,SAAR;AAQD,OAVS;AAAA,KAWgB;;AAExB,UAAKC,KAAL,GAAa;AACXC,gBAAU;AADC,KAAb;AAFwB;AAKzB;;;;2CACsB;AACrB,WAAKC,IAAL,GAAY,IAAZ;AACD;;;wCACmB;AAAA;;AAClB,WAAKA,IAAL,GAAY,eAAS,EAAEC,OAAO,KAAT,EAAgBC,aAAa,KAA7B,EAAT,CAAZ;AACA,WAAKF,IAAL,CACGG,GADH,kBACkB;AACdC,gBAAQ,KAAKC,WADC;AAEdC,mBAAW,GAFG;AAGdC,gBAAQ;AAHM,OADlB,EAMGJ,GANH,eAMe,EAAEC,uBAAF,EANf,EAOGD,GAPH,iBAOiB,EAAEC,uBAAF,EAPjB,EAQGD,GARH,cAQc;AACVK,kBAAU,cADA;AAEVC,gBAAQ;AAFE,OARd,EAYGC,GAZH;;AAcA,WAAKV,IAAL,CAAUd,OAAV,GAAoB,KAAKA,OAAL,CAAa,KAAKc,IAAL,CAAUd,OAAvB,CAApB;;AAEA,WAAKc,IAAL,CAAUW,EAAV,CAAa,eAAb,EAA8B,KAAKxB,SAAnC;AACA,WAAKa,IAAL,CAAUW,EAAV,CAAa,YAAb,EAA2B,KAAKrB,WAAhC;AACA,WAAKU,IAAL,CAAUW,EAAV,CAAa,qBAAb,EAAoC,UAACC,MAAD,EAASC,SAAT,EAAuB;AACzD;AACA;AACA;AACA;AACA;AACAzB,gBAAQC,GAAR,CAAY,eAAZ,EAA6B,OAAKW,IAAL,CAAUF,KAAvC;AACA;AACA;AACA;AACA;AACA;AACD,OAZD;;AAcA,WAAKE,IAAL,CAAUW,EAAV,CAAa,cAAb,EAA6B,YAAM;AACjC,YAAMG,cAAc,OAAKd,IAAL,CAAUe,QAAV,GAAqBC,aAAzC;AACA5B,gBAAQC,GAAR,CAAY,uBAAuByB,WAAnC;AACA,eAAKG,QAAL,CAAc;AACZlB,oBAAUe;AADE,SAAd;AAGD,OAND;AAOD;;;6BACQ;AAAA;;AACP,aACE;AACE,aAAK,mBAAQ;AACX,iBAAKT,WAAL,GAAmBa,IAAnB;AACD;AAHH,QADF;AAOD;;;;EArFqC,gBAAMC,S;;AAAzBnC,U,CAOZoC,Y,GAAe,E;kBAPHpC,U","file":"index.js","sourcesContent":["// @flow\n\nimport React from \"react\";\nimport yeast from \"yeast\";\n// eslint-disable-next-line\nimport Uppy, { Core, DragDrop, Tus10, Dashboard, Webcam, Informer } from 'uppy';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport \"!style-loader!css-loader!uppy/dist/uppy.min.css\";\n\ntype DefaultProps = {};\ntype Props = {};\ntype State = { progress: number };\n\nexport default class UploadArea extends React.Component<\n  DefaultProps,\n  Props,\n  State\n> {\n  uppy: Uppy.Core;\n  uppyElement: HTMLDivElement;\n  static defaultProps = {};\n  addFile = () => {};\n  onFileAdd = () => {\n    console.log(arguments);\n  };\n  onFileAdded = () => {\n    console.log(arguments);\n  };\n  addFile = addFile => file => {\n    console.log(\"file \", file);\n    addFile({\n      id: yeast(),\n      source: \"React input\",\n      name: file.name,\n      type: file.type,\n      alt: file.name,\n      data: file.data\n    });\n  };\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      progress: 0\n    };\n  }\n  componentWillUnmount() {\n    this.uppy = null;\n  }\n  componentDidMount() {\n    this.uppy = new Core({ debug: false, autoProceed: false });\n    this.uppy\n      .use(Dashboard, {\n        target: this.uppyElement,\n        maxHeight: 300,\n        inline: true\n      })\n      .use(Webcam, { target: Dashboard })\n      .use(Informer, { target: Dashboard })\n      .use(Tus10, {\n        endpoint: \"/api/upload/\",\n        resume: true\n      })\n      .run();\n\n    this.uppy.addFile = this.addFile(this.uppy.addFile);\n\n    this.uppy.on(\"core:file-add\", this.onFileAdd);\n    this.uppy.on(\"file-added\", this.onFileAdded);\n    this.uppy.on(\"core:upload-success\", (fileID, uploadURL) => {\n      // console.log(fileID, uploadURL);\n      // console.log(uploadURL);\n      // console.log(Utils.getFileType);\n      // console.log(Utils.getFileType(fileID));\n      // this.uppy.addThumbnail(fileID);\n      console.log(\"logging state\", this.uppy.state);\n      // const newImgArray = this.state.images.slice();\n      // newImgArray.push(uploadURL);\n      // this.setState({\n      //   images: newImgArray,\n      // });\n    });\n\n    this.uppy.on(\"core:success\", () => {\n      const newProgress = this.uppy.getState().totalProgress;\n      console.log(\"upload progress = \" + newProgress);\n      this.setState({\n        progress: newProgress\n      });\n    });\n  }\n  render() {\n    return (\n      <div\n        ref={node => {\n          this.uppyElement = node;\n        }}\n      />\n    );\n  }\n}\n"]}