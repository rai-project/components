// @flow

import React from "react";
import yeast from "yeast";
// eslint-disable-next-line
import Uppy, { Core, DragDrop, Tus10, Dashboard, Webcam, Informer } from 'uppy';

// eslint-disable-next-line import/no-webpack-loader-syntax
import "!style-loader!css-loader!uppy/dist/uppy.min.css";

type DefaultProps = {};
type Props = {};
type State = { progress: number };

export default class UploadArea extends React.Component<
  DefaultProps,
  Props,
  State
> {
  uppy: Uppy.Core;
  uppyElement: HTMLDivElement;
  static defaultProps = {};
  addFile = () => {};
  onFileAdd = () => {
    console.log(arguments);
  };
  onFileAdded = () => {
    console.log(arguments);
  };
  addFile = addFile => file => {
    console.log("file ", file);
    addFile({
      id: yeast(),
      source: "React input",
      name: file.name,
      type: file.type,
      alt: file.name,
      data: file.data
    });
  };
  constructor(props: Props) {
    super(props);
    this.state = {
      progress: 0
    };
  }
  componentWillUnmount() {
    this.uppy = null;
  }
  componentDidMount() {
    this.uppy = new Core({ debug: false, autoProceed: false });
    this.uppy
      .use(Dashboard, {
        target: this.uppyElement,
        maxHeight: 300,
        inline: true
      })
      .use(Webcam, { target: Dashboard })
      .use(Informer, { target: Dashboard })
      .use(Tus10, {
        endpoint: "/api/upload/",
        resume: true
      })
      .run();

    this.uppy.addFile = this.addFile(this.uppy.addFile);

    this.uppy.on("core:file-add", this.onFileAdd);
    this.uppy.on("file-added", this.onFileAdded);
    this.uppy.on("core:upload-success", (fileID, uploadURL) => {
      // console.log(fileID, uploadURL);
      // console.log(uploadURL);
      // console.log(Utils.getFileType);
      // console.log(Utils.getFileType(fileID));
      // this.uppy.addThumbnail(fileID);
      console.log("logging state", this.uppy.state);
      // const newImgArray = this.state.images.slice();
      // newImgArray.push(uploadURL);
      // this.setState({
      //   images: newImgArray,
      // });
    });

    this.uppy.on("core:success", () => {
      const newProgress = this.uppy.getState().totalProgress;
      console.log("upload progress = " + newProgress);
      this.setState({
        progress: newProgress
      });
    });
  }
  render() {
    return (
      <div
        ref={node => {
          this.uppyElement = node;
        }}
      />
    );
  }
}
