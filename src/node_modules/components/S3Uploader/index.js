import React from "react";
import PropTypes from "prop-types";
import aws from "aws-sdk";
import yeast from "yeast";

const uploadOptions = { partSize: 10 * 1024 * 1024, queueSize: 1 };

class S3Uploader extends React.Component {
  static propTypes = {
    region: PropTypes.string.isRequired,
    accessKeyId: PropTypes.string.isRequired,
    secretAccessKey: PropTypes.string.isRequired,
    defaultUploadBucketBaseURL: PropTypes.string.isRequired,
    defaultUploadBucketName: PropTypes.string.isRequired
  };
  static defaultProps = {
    region: `${process.env.REACT_APP_region}`,
    accessKeyId: `${process.env.REACT_APP_aws_access_key_id}`,
    secretAccessKey: `${process.env.REACT_APP_aws_secret_access_key}`,
    defaultUploadBucketBaseURL: `${process.env
      .REACT_APP_s3_upload_bucket_base_url}`,
    defaultUploadBucketName: `${process.env.REACT_APP_s3_upload_bucket_name}`
  };
  escapeName = s => {
    return encodeURIComponent(s)
      .replace(/%20/gim, "+")
      .replace(/%2F/gim, "/")
      .replace(/\"/gim, "%22")
      .replace(/\#/gim, "%23")
      .replace(/\$/gim, "%24")
      .replace(/\&/gim, "%26")
      .replace(/\'/gim, "%27")
      .replace(/\(/gim, "%28")
      .replace(/\)/gim, "%29")
      .replace(/\,/gim, "%2C")
      .replace(/\:/gim, "%3A")
      .replace(/\;/gim, "%3B")
      .replace(/\=/gim, "%3D")
      .replace(/\?/gim, "%3F")
      .replace(/\@/gim, "%40");
  };
  getUploadKey = s => {
    if (!s) {
      s = yeast();
    }
    s = this.escapeName(s);
    return this.props.defaultUploadBucketName + "/" + s;
  };
  componentDidMount() {
    const {
      accessKeyId,
      secretAccessKey,
      region,
      defaultUploadBucketBaseURL
    } = this.props;
    aws.config.update(
      new aws.Config({
        accessKeyId,
        secretAccessKey,
        region
      })
    );
    this.uploader = new aws.S3({
      config: this.config,
      params: {
        Bucket: defaultUploadBucketBaseURL
      }
    });
  }
  doUpload = ({ key, data }) => {
    key = this.getUploadKey(key);
    return this.uploader
      .upload(
        {
          Key: key,
          ContentType: "text/html",
          Body: data,
          ACL: "public-read"
        },
        uploadOptions
      )
      .promise();
  };
  uploadData = async () => {
    try {
      const res = await this.doUpload({ key: "test2.html", data: " fdasfda" });
      console.log(res);
    } catch (err) {
      console.log(err);
    }
  };
  render() {
    return (
      <div onClick={this.uploadData}>
        <small>
          You are running this application in <b>{process.env.NODE_ENV}</b>{" "}
          mode.
        </small>
      </div>
    );
  }
}

export default S3Uploader;
