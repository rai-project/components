import React from "react";
import PropTypes from "prop-types";
import aws from "aws-sdk";

class S3Uploader extends React.Component {
  static propTypes = {
    region: PropTypes.string.isRequired,
    accessKeyId: PropTypes.string.isRequired,
    secretAccessKey: PropTypes.string.isRequired,
    defaultUploadBucketBaseURL: PropTypes.string.isRequired,
    defaultUploadBucketName: PropTypes.string.isRequired
  };
  static defaultProps = {
    region: `${process.env.REACT_APP_region}`,
    accessKeyId: `${process.env.REACT_APP_aws_access_key_id}`,
    secretAccessKey: `${process.env.REACT_APP_aws_secret_access_key}`,
    defaultUploadBucketBaseURL: `${process.env
      .REACT_APP_s3_upload_bucket_base_url}`,
    defaultUploadBucketName: `${process.env.REACT_APP_s3_upload_bucket_name}`
  };
  encodeURL = string => {
    return encodeURIComponent(string)
      .replace(/%20/gim, "+")
      .replace(/%2F/gim, "/")
      .replace(/\"/gim, "%22")
      .replace(/\#/gim, "%23")
      .replace(/\$/gim, "%24")
      .replace(/\&/gim, "%26")
      .replace(/\'/gim, "%27")
      .replace(/\(/gim, "%28")
      .replace(/\)/gim, "%29")
      .replace(/\,/gim, "%2C")
      .replace(/\:/gim, "%3A")
      .replace(/\;/gim, "%3B")
      .replace(/\=/gim, "%3D")
      .replace(/\?/gim, "%3F")
      .replace(/\@/gim, "%40");
  };
  componentDidMount() {
    const {
      accessKeyId,
      secretAccessKey,
      region,
      defaultUploadBucketBaseURL,
      defaultUploadBucketName
    } = this.props;
    aws.config = new aws.Config({
      accessKeyId,
      secretAccessKey,
      region
    });
    console.log(this.props);
    this.session = new aws.S3({
      config: this.config,
      params: {
        Bucket: defaultUploadBucketBaseURL
      }
    });
    this.session.putObject(
      {
        Key: defaultUploadBucketName + "/" + "test.html",
        ContentType: "text/html",
        Body: "klfda",
        ACL: "public-read"
      },
      (err, data) => {
        if (err) {
          console.log("ERROR: " + err);
        } else {
          console.log("uploaded...");
        }
      }
    );
  }
  render() {
    return (
      <div>
        <small>
          You are running this application in <b>{process.env.NODE_ENV}</b>{" "}
          mode.
        </small>
      </div>
    );
  }
}

export default S3Uploader;
