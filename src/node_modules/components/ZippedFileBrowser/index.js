import React from 'react';
import PropTypes from 'prop-types';
import FileBrowser from '../FileBrowser';
import JSZip from 'jszip';
import yeast from 'yeast';
import { head, initial, size, reduce, split, keys, trimEnd } from 'lodash';

export default class ZippedFileBrowser extends React.Component {
	static propTypes = {
		data: PropTypes.string.isRequired,
	};
	state = {};
	// see https://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript
	b64toBlob(b64Data, contentType, sliceSize) {
		contentType = contentType || '';
		sliceSize = sliceSize || 512;

		var byteCharacters = atob(b64Data);
		var byteArrays = [];

		for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
			var slice = byteCharacters.slice(offset, offset + sliceSize);

			var byteNumbers = new Array(slice.length);
			for (var i = 0; i < slice.length; i++) {
				byteNumbers[i] = slice.charCodeAt(i);
			}

			var byteArray = new Uint8Array(byteNumbers);

			byteArrays.push(byteArray);
		}

		var blob = new Blob(byteArrays, { type: contentType });
		return blob;
	}
	baseName(str) {
		var base = new String(str).substring(str.lastIndexOf('/') + 1);
		if (base.lastIndexOf('.') != -1) base = base.substring(0, base.lastIndexOf('.'));
		return base;
	}
	splitSeperator(str) {
		return split(str, /[\\/]/);
	}
	trimSeperator(str) {
		return trimEnd(str, '/\\');
	}
	toFileBrowserEntries(zipFiles) {
		let res = {};
		let root = '';
		console.log(keys(zipFiles));
		keys(zipFiles).map(key => {
			console.log({ res });
			const val = zipFiles[key];
			const name = this.trimSeperator(key);
			const splt = this.splitSeperator(name);
			const path = initial(splt);
			console.log({ path });
			if (size(path) === 0) {
				if (head(splt) === '__MACOSX') {
					return;
				}
				root = head(splt);
				res[root] = {
					uuid: yeast(),
					name: root,
					isDirectory: true,
					isOpen: true,
					date: val.date,
					content: [],
				};
				return;
			}
			const elem = reduce(
				path,
				(result, value, key) => {
					result[value] = result[value] || { content: [] };
					return result[value];
				},
				res
			);
			if (val.dir) {
				const baseName = this.baseName(name);
				elem.content.push({
					uuid: yeast(),
					path: key,
					name: baseName,
					isDirectory: true,
					isOpen: true,
					date: val.date,
					content: [],
				});
			} else {
				const fileName = this.baseName(name);
				if (fileName === '.DS_Store') {
					return;
				}
				const dirName = this.trimSeperator(name.substr(0, name.lastIndexOf(fileName)));
				console.log({ key, elem, fileName, dirName });
				elem.content.push({
					uuid: yeast(),
					path: key,
					isDirectory: false,
					name: fileName,
					date: val.date,
				});
			}
		});
		return [res['test_folder']];
	}

	async componentDidMount() {
		const zip = new JSZip();
		const blob = this.b64toBlob(this.props.data, 'text/plain');
		let zipHandle;
		try {
			zipHandle = await zip.loadAsync(blob);
		} catch (err) {
			this.setState({
				error: err.toString(),
			});
			return;
		}
		this.setState({
			files: this.toFileBrowserEntries(zipHandle.files),
		});
	}
	render() {
		const { files, err } = this.state;
		if (err) {
			return <div>Error</div>;
		}
		if (size(files) > 0) {
			return <FileBrowser content={files} />;
		}
		return <div>XXXX</div>;
	}
}
