import React from "react";
import PropTypes from "prop-types";
import { Row, Column } from "hedron";
import { If, Then, Else } from "react-if";
import { DragSource, DropTarget } from "react-dnd";
import styled from "styled-components";
import File from "./File";
import ADirectory from "./Directory";
import yeast from "yeast";
import FolderIcon from "react-icons/lib/fa/folder-o";
import FolderOpenIcon from "react-icons/lib/fa/folder-open-o";

const Opener = styled.div`
  height: ${props => {
    return props.open ? "100%" : "0px";
  }};
  overflow: hidden;
`;

const Name = styled.span`padding-left: 5px;`;
const DirectoryLevel = styled.div`padding-left: 25px;`;

class Directory extends React.Component {
  static propTypes = {
    debug: PropTypes.bool,
    uuid: PropTypes.string,
    name: PropTypes.string,
    content: PropTypes.array,
    isOpen: PropTypes.bool
  };

  static defaultProps = {
    debug: false,
    uuid: yeast(),
    name: ".",
    content: [],
    isOpen: false
  };
  constructor(props) {
    super(props);
    this.state = { isOpen: props.isOpen || false };
  }
  handleOnClick = () => {
    // eslint-disable-next-line
		this.setState({
			isOpen: !this.state.isOpen, // eslint-disable-line
    });
  };
  render() {
    const {
      debug,
      uuid,
      content,
      name,
			connectDropTarget, // eslint-disable-line
			connectDragSource, // eslint-disable-line
    } = this.props;
    const { isOpen } = this.state;
    const body = content.map(p => {
      return p.isDirectory
        ? <ADirectory debug={debug} key={p.name + uuid} {...p} />
        : <File debug={debug} key={p.name + uuid} {...p} />;
    });
    return connectDragSource(
      <div>
        <Row debug={debug} divisions={2}>
          <Column debug={debug} fluid>
            <div onClick={this.handleOnClick}>
              <If condition={isOpen}>
                <Then>
                  <FolderOpenIcon />
                </Then>
                <Else>
                  <FolderIcon />
                </Else>
              </If>
              <Name>
                {name}
              </Name>
            </div>
            <DirectoryLevel>
              <Opener open={isOpen}>
                {body}
              </Opener>
            </DirectoryLevel>
          </Column>
        </Row>
      </div>
    );
  }
}

const entrySource = {
  beginDrag(props) {
    return {
      text: props.text
    };
  }
};

const entryTarget = {
  drop: (props, monitor) => {
    if (monitor == null) return;

    // Check if only child is selected:
    if (!monitor.isOver({ shallow: true })) return;

    const sourceItem = monitor.getItem();

    if (sourceItem.directory) {
      props.sandboxActions.moveDirectoryToDirectory(
        props.sandboxId,
        sourceItem.id,
        props.shortid
      );
    } else {
      props.sandboxActions.moveModuleToDirectory(
        props.sandboxId,
        sourceItem.id,
        props.shortid
      );
    }
  },

  canDrop: (props, monitor) => {
    if (monitor == null) return false;
    const source = monitor.getItem();
    if (source == null) return false;

    if (source.id === props.id) return false;
    return true;
  }
};

const collectTarget = (connectMonitor, monitor) => ({
  // Call this function inside render()
  // to let React DnD handle the drag events:
  connectDropTarget: connectMonitor.dropTarget(),
  // You can ask the monitor about the current drag state:
  isOver: monitor.isOver({ shallow: true }),
  canDrop: monitor.canDrop(),
  itemType: monitor.getItemType()
});
const collectSource = (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  isDragging: monitor.isDragging()
});

// eslint-disable-next-line
export default DragSource('Directory', entrySource, collectSource)(
  // eslint-disable-next-line
	DropTarget('Directory', entryTarget, collectTarget)(Directory)
);
