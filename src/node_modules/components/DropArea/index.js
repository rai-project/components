import React from 'react';
import { Container, Progress, Card, Image, Dimmer, Segment, Feed, Label, Icon } from 'semantic-ui-react';
import PropTypes from 'prop-types';
import { Form } from 'formsy-semantic-ui-react';
import ReactDropzone from 'react-dropzone';
import styled from 'styled-components';
import icon from './icon.svg';

const DroppedFilesWrapper = styled.div`
	width: 100%;
	font-size: 200%;
	color: #2d3e50;
	font-weight: 400;
	margin: 2em 0;
	vertical-align: baseline;
`;

const DropAreaWrapper = styled.div`
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 10vh;
	background: url(${props => props.icon || icon});
	background-attachment: initial;
	background-position-x: center;
	background-position-y: center;

	background-size: contain;
	background-position: center;
	background-repeat: no-repeat;

	border-width: 1;
	border-color: "#ddd";
	border-style: "solid";
	border-radius: 2;
`;

const Preview = styled.div`margin: auto auto auto 16px;`;

export default class DropArea extends React.Component {
	static propTypes = {
		/**
     * Handler for the onChange event on the input.
     */
		onChange: PropTypes.func.isRequired,
		/**
     * Marks that this input is required for form submission.
     */
		required: PropTypes.bool,
		/**
     * Marks that the user cannot change this input.
     */
		disabled: PropTypes.bool,
		/**
     * Adds a class name to the input element.
     */
		className: PropTypes.string,
		/**
     * Adds an id to the input element.
     */
		id: PropTypes.string,

		icon: PropTypes.string,
	};

	static defaultProps = {
		required: false,
		disabled: false,
		className: null,
		id: null,
		icon,
	};

	onFileDrop = files => {
		console.log(files);
		// const upload = uploadProfilePicture(files[0])
		// // track progress
		// upload.on('state_changed', snapshot => {
		//   this.setState({ uploadProgress: Math.floor((snapshot.bytesTransferred / snapshot.totalBytes) * 100) })
		// })
	};
	renderFiles = () => {
		const { value } = this.props;
		if (value && value[0]) {
			return (
				<DroppedFilesWrapper>
					<Icon name="fileFilled" />
					<Preview active={true}>
						{value[0].name}
					</Preview>
				</DroppedFilesWrapper>
			);
		} else {
			return (
				<DroppedFilesWrapper>
					<Preview>Drop a file here, or click to browse.</Preview>
				</DroppedFilesWrapper>
			);
		}
	};

	render() {
		const { onChange, value, required, disabled, className, id } = this.props;
		console.log(DropAreaWrapper);
		return (
			<DropAreaWrapper icon={icon}>
				<ReactDropzone
					multiple={false}
					style={{}}
					accept="image/*"
					onDrop={this.onFileDrop}
					activeStyle={{ color: '#00bcec' }}
					rejectStyle={{}}
					required={required}
					disabled={disabled}
					className={className}
					id={id}>
					{this.renderFiles()}
				</ReactDropzone>
			</DropAreaWrapper>
		);
	}
}
