import React from "react";
import {
  Container,
  Progress,
  Card,
  Image,
  Dimmer,
  Segment,
  Feed,
  Label,
  Icon
} from "semantic-ui-react";
import PropTypes from "prop-types";
import { Form } from "formsy-semantic-ui-react";
import Dropzone from "react-dropzone";
import styled from "styled-components";

const DropAreaWrapper = styled.div`
  width: 100%;
  display: flex;
  flex-direction: row;
  cursor: pointer;
`;

const Preview = styled.div`margin: auto auto auto 16px;`;

export default class DropArea extends React.Component {
  static propTypes = {
    /**
     * Handler for the onChange event on the input.
     */
    onChange: PropTypes.func.isRequired,
    /**
     * Marks that this input is required for form submission.
     */
    required: PropTypes.bool,
    /**
     * Marks that the user cannot change this input.
     */
    disabled: PropTypes.bool,
    /**
     * Adds a class name to the input element.
     */
    className: PropTypes.string,
    /**
     * Adds an id to the input element.
     */
    id: PropTypes.string
  };

  static defaultProps = {
    required: false,
    disabled: false,
    className: null,
    id: null
  };

  onFileDrop = files => {
    console.log(files);
    // const upload = uploadProfilePicture(files[0])
    // // track progress
    // upload.on('state_changed', snapshot => {
    //   this.setState({ uploadProgress: Math.floor((snapshot.bytesTransferred / snapshot.totalBytes) * 100) })
    // })
  };
  renderFiles = () => {
    const { value } = this.props;
    if (value && value[0]) {
      return (
        <DropAreaWrapper>
          <Icon name="fileFilled" />
          <Preview active={true}>
            {value[0].name}
          </Preview>
        </DropAreaWrapper>
      );
    } else {
      return (
        <DropAreaWrapper>
          <Icon name="file" />
          <Preview>Drop a file here, or click to browse.</Preview>
        </DropAreaWrapper>
      );
    }
  };

  render() {
    const { onChange, value, required, disabled, className, id } = this.props;

    return (
      <Container>
        <Dropzone
          multiple={false}
          accept="image/*"
          onDrop={this.onFileDrop}
          style={{
            margin: "0px auto",
            width: "100%",
            padding: "2.5em 0",
            background: "rgba(0,0,0,0.1)",
            textAlign: "center",
            borderWidth: 1,
            borderColor: "#ddd",
            borderStyle: "solid",
            borderRadius: 2
          }}
          activeStyle={{ color: "#00bcec" }}
          rejectStyle={{}}
          required={required}
          disabled={disabled}
          className={className}
          id={id}
        >
          {this.renderFiles()}
        </Dropzone>
      </Container>
    );
  }
}
